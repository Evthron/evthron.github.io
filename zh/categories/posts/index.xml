<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Evthron&#39;s blog zh</title>
        <link>https://evthron.github.io/zh/categories/posts/</link>
        <description>Recent content on Evthron&#39;s blog zh</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Tue, 24 Dec 2024 23:36:05 +0800</lastBuildDate><atom:link href="https://evthron.github.io/zh/categories/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>和朋友保持聯絡</title>
        <link>https://evthron.github.io/zh/posts/contact-friends/</link>
        <pubDate>Tue, 24 Dec 2024 23:36:05 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/contact-friends/</guid>
        <description>&lt;p&gt;「保持聯絡」絕不是客套話，友誼是從見面的第一天起就開始玩的乒乓球，你來我往，不能停下來。但我空有這種觀念，還是當不成一個好朋友，因為只要離開了自己的視線，我就幾乎不會去關心別人過得怎麼樣。大部分人關心的事，我不是覺得害怕，就是覺得沒意義。&lt;/p&gt;
&lt;h2 id=&#34;志同道合&#34;&gt;志同道合&lt;/h2&gt;
&lt;p&gt;每個人都關心考試成績和將來的出路，但我總是避免思考這些問題。我學習只是順着自己淺薄的好奇心，沒有興趣鑽研複雜的題目；複習也只是害怕考試不及格，對分數沒有什麼追求。我害怕討論考試，和工作有關的事更是我的死穴，每次有人和我聊到這些話題，我就會小心翼翼地架起防禦，生怕別人發現我只是個不知道自己想要什麼的人。&lt;/p&gt;
&lt;p&gt;我的眼界很狹窄，想做到的事也沒有社會上的價值，非常微不足道。我想，自己的志向不是自己想出來的也可以。無論是打擊也好，鼓勵也好，如果有朋友的啓發，我應該能找到更像樣一點的目標才對。&lt;/p&gt;
&lt;h2 id=&#34;意氣相投&#34;&gt;意氣相投&lt;/h2&gt;
&lt;p&gt;如果只是想找人玩的話應該不難，但我已經對娛樂活動不感興趣了。我還花了很多心力排除這些干擾，故事、遊戲和音樂在我看來都是讓人分心的娛樂，是逃避現實的方法。就算我能靠着以前的經驗，興高采烈地分享自己對某部作品的感想，內心還是覺得不自在。&lt;/p&gt;
&lt;p&gt;這種想法讓我少了一個聯絡朋友的絕佳藉口。而且，一般人就算活在這些娛樂裏面，也不是一樣過得很好嗎？他們會説，一天到晚看短片、玩手遊又怎麼樣？只要在應該做事的時候把事情做好不就可以了嗎？工作的動力不就是賺更多錢，享受更豐富的娛樂嗎？我也不能昂首挺胸地叫其他人和我一樣試着擺脱娛樂，因為我就算這樣做了，也沒做出什麼成果。&lt;/p&gt;
&lt;p&gt;其實參加自己不感興趣的活動也不是壞事，就算我對事情本身不感興趣，聽別人分享他們的興趣愛好也是很有意思的，有時更會讓我大開眼界。要是朋友不做我沒有接觸過的事情，反而沒有意義。&lt;/p&gt;
&lt;p&gt;不過，這只能讓我痛快地接受邀請而已，更重要的問題是，我能從其他人的角度考慮，主動邀請他們參加娛樂活動嗎？我不知道。如果連我也沒有辦法貫徹「保持聯繫」到底的話，那還有誰會呢？&lt;/p&gt;
&lt;h2 id=&#34;開誠布公&#34;&gt;開誠布公&lt;/h2&gt;
&lt;p&gt;前面的理由都只是藉口而已，我知道要保持和朋友聯絡，就必須要發自內心地對他們的生活感興趣。&lt;/p&gt;
&lt;p&gt;很遺憾的是，要瞭解其他人的生活，就很難繞開社交網絡，但是我很害怕在社交網絡上觀看別人的生活，似乎只要疏遠了一段時間，對方就會變成我不認識的人，過着與我毫無關係的生活。我害怕看別人分享自己的生活，卻希望別人能讀我寫的文章。這樣不太公平吧？&lt;/p&gt;
&lt;p&gt;加上社交網絡是個毫不自由，讓人提心吊膽的地方。一是科技公司掌握着我的賬户的生殺大權，哪天我添加了太多朋友，系統就會認為我違反規定，把我的賬號停掉，抹殺我在網絡社會裏的存在；二是要在維持網絡形象和保護隱私之間走鋼索。我必須要用實名設賬號，不然就沒有人知道我是我，更不用説收穫名氣了，同時又不能暴露太多個人資訊，或留下會被人當作把柄的字句。&lt;/p&gt;
&lt;p&gt;要是能把別人在社交網絡上發的文章接到我的閲讀器裏就好了，這樣我會讀得輕鬆一點，但社交網站都很封閉，不一定允許我這樣做。我沒有解決這個問題的好辦法，只能先看我光憑通訊軟件能走多遠了。&lt;/p&gt;
&lt;h2 id=&#34;躊躇不決&#34;&gt;躊躇不決&lt;/h2&gt;
&lt;p&gt;就算我把煩惱想得清清楚楚，情況依舊沒有改變。似乎我應該做一套督促自己找人聊天的遊戲化系統，不過這很明顯不是問題的關鍵。在那之前，我更應該頻繁地在這裏分享自己正在做的事，草稿也好，半成品也好，至少我要做好這種單向的交流。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>交朋友的理由</title>
        <link>https://evthron.github.io/zh/posts/reason-to-socialize/</link>
        <pubDate>Tue, 19 Nov 2024 20:18:31 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/reason-to-socialize/</guid>
        <description>&lt;p&gt;我以前不太關心朋友的生活。如果關心他們的生活對我沒有好處的話，我就會覺得沒有意義，但如果是為了得到好處才去關心的話，我又會覺得自己很不真誠。直到我讀了 Getting Relationships Right 這本書之後，才發現我其實也是很渴望能和別人建立連繫的。我雖然害怕別人對自己的事情不敢興趣，不過如果他們真的能聽進去，我就會很驚喜；我雖然害怕聽到別人的生活比自己充實，但有時候也能從中發現一些讓我覺得很新奇的事情。關心別人是為了滿足我內心的感覺，而不是為了外在的利益，這是我交際的動力。&lt;/p&gt;
&lt;p&gt;我要陪朋友閒聊，發我不喜歡用的短信，參加我沒有興趣的聚會，和不認識的人搭話。不是為了&lt;a class=&#34;link&#34; href=&#34;https://evthron.github.io/zh/posts/knowledge-exchange/&#34; &gt;得到知識（交換知識的聊天挑戰 ）&lt;/a&gt;，也不是為了獲得幫助，而是為了互相了解大家的性格、興趣和目標。這是一件多麼冒險，多麼耗時，但又多麼好玩的事啊！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>docker 連不上網的解決辦法和折騰的悲哀</title>
        <link>https://evthron.github.io/zh/posts/docker-panic/</link>
        <pubDate>Thu, 17 Oct 2024 11:37:47 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/docker-panic/</guid>
        <description>&lt;p&gt;電腦出了問題，我就會死纏爛打，絕不放棄，這種性格連我自己也感到很無奈。&lt;/p&gt;
&lt;p&gt;學校的作業要用到 Docker 開發網頁，把 Docker 想象成一個工具箱就可以。我發現網頁在 Docker 裏面連不上網，功課做不成了。很不巧，我用的是 Arch Linux。一般人用的操作系統不是 Windows 就是 MacOS。但 Arch 是要自己逐步把一個個組件拼起來的操作系統。好處是無論系統出了什麼問題都可以自己修理，壞處是會遇到很多一般人根本不會遇到的問題，可以説是作繭自縛。&lt;/p&gt;
&lt;p&gt;作業裏要連接外部網站的是一個 PHP 程式，是不是程式出錯了？老師給的程序應該不會錯，我對 PHP 又是一竅不通，隨便找了個網站的例子改了改程式碼，沒用。&lt;/p&gt;
&lt;p&gt;仔細看看網站報了什麼錯，&amp;lsquo;Temporary failure in name resolution&amp;rsquo;，DNS 出問題了。想必是因為我裝了個奇怪的 dnsmasq，雖然很危險但沒辦法只好暫時停用了。沒用。&lt;/p&gt;
&lt;p&gt;那麼是 Docker 的問題嗎？我對 Docker 也是一竅不通。説到底，這門課也用不着我們懂。本來只是輸一行 &lt;code&gt;docker compose up&lt;/code&gt; 的事，裏面發生什麼事情完全不用管。唉，沒辦法，我還是學了一下 Docker 的運作原理。Docker 可以克服不同電腦甚至操作系統之間水土不服的問題，把開發環境連網站打包成容器 (Container），就哪裏都可以用。原來如此!我還自作聰明地把 Dockerfile，也就是設定檔裏的一行 apt-get 刪掉了呢。 Arch 上下載軟件的工具是 pacman，不是 apt。但只要設定好開發環境裏用 Apache，就沒問題。我把 Container 刪了再重建，沒用。&lt;/p&gt;
&lt;p&gt;我慌了，這還不夠嗎？看來是網絡設定問題，這就很麻煩了，可以出錯的地方太多了。安裝 Arch 的時候，設置網絡是最頭疼的部分。光説軟件層面已經有一大堆能把人搞糊塗的概念：網絡接口、網絡管理器、主機、IP 地址、端口、域名、DNS、防火牆。如果是 Docker 要調整內部的網絡設定，那就要弄官方文檔上説的什麼「端口轉發」，我一點也看不懂。&lt;/p&gt;
&lt;p&gt;總之先上網找找看。最好先排除學校給的容器有問題的情況。原來只要一句就可以調試 Docker 網絡。 &lt;code&gt;docker run busybox ping google.com&lt;/code&gt;，借一個叫 busybox 的開發環境，向google 發一個乒乓球，看看對方會不會傳球回來。沒反應，丟包率 100%。&lt;/p&gt;
&lt;p&gt;網上的答案都説是 docker 是 DNS 設定出錯了。沒有辦法把 google.com 翻譯成真實的 IP 地址。要手動把 docker 的 dns 服務器改成 &lt;code&gt;8.8.8.8&lt;/code&gt;，也就是 Google 提供的 DNS 服務器。一樣沒用。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/etc/docker/daemon.json
{
    &amp;#34;dns&amp;#34;: [&amp;#34;8.8.8.8&amp;#34;]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這時我想起來，直接 ping IP 地址就可以排除 DNS 服務器的影響了。&lt;code&gt;docker run busybox ping 127.0.0.1&lt;/code&gt;，這次成功，確認了 Docker 可以連上自家主機。然後是&lt;code&gt;docker run busybox ping 8.8.8.8&lt;/code&gt;，但一樣不管用。&lt;/p&gt;
&lt;p&gt;説不定是防火牆的問題，乾脆關掉，沒用。我連防火牆軟件都試着從 ufw 換到 firewalld，還是沒用。&lt;/p&gt;
&lt;p&gt;這下就徹底沒辦法了，只能像無頭蒼蠅一樣在各大論壇遊走碰運氣。Arch wiki，Gentoo wiki，當然少不了 StackOverFlow。解決方法有一大堆，就是沒一種管用。別問我是什麼意思，我也不知道。按指示執行自己看不懂的步驟可是操作電腦的基本功。&lt;/p&gt;
&lt;h2 id=&#34;arch-wiki&#34;&gt;Arch wiki&lt;/h2&gt;
&lt;p&gt;在 /etc/docker/daemon.json 設定：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;https://wiki.archlinux.org/title/Docker#Starting_Docker_breaks_KVM_bridged_networking
{
  &amp;#34;iptables&amp;#34;: false
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;gentoo-wiki&#34;&gt;Gentoo wiki&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://wiki.gentoo.org/wiki/Docker#Networking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wiki.gentoo.org/wiki/Docker#Networking&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 /etc/sysctl.d/local.conf 裏設定：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;net.ipv4.ip_forward=1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;改-docker-composeyaml&#34;&gt;改 docker-compose.yaml&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/questions/33780947/not-able-to-connect-to-network-inside-docker-container&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/questions/33780947/not-able-to-connect-to-network-inside-docker-container&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;services:
  worker:
    build: .
    network_mode: host #added here
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;使用主機的網絡&#34;&gt;使用主機的網絡&lt;/h3&gt;
&lt;p&gt;這個辦法是有效的，繞過了問題，但好像不能和 &lt;code&gt;docker compose&lt;/code&gt; 一起用。
&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/5626362&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/5626362&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;docker run busybox --network=&amp;#34;host&amp;#34; ping google.com
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;windows-式修理法&#34;&gt;Windows 式修理法&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/68474595&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/68474595&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl restart docker
reboot
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;nftables-flush&#34;&gt;nftables flush&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbs.archlinux.org/viewtopic.php?id=277653&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bbs.archlinux.org/viewtopic.php?id=277653&lt;/a&gt;
&lt;a class=&#34;link&#34; href=&#34;https://bbs.archlinux.org/viewtopic.php?id=277638&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://bbs.archlinux.org/viewtopic.php?id=277638&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo nft flush ruleset
sudo pacman -R nftables 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;搞了這麼久，真的感覺自己在浪費時間，趕緊換到 Windows 弄 WSL (Windows Subsystem of linux）或者直接在 Linux 上裝虛擬機肯定會比較快。但我只要一被麻煩纏上就沒有心情思考其他的解決辦法。我説不定是在追求柳暗花明的感覺。&lt;/p&gt;
&lt;p&gt;幸好，36 個字節真的可以改變改變命運，答案其實就藏在同一條問題的深處。
&lt;a class=&#34;link&#34; href=&#34;https://stackoverflow.com/a/70452290&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://stackoverflow.com/a/70452290&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo systemctl disable nftables
sudo systemctl stop nftables
sudo reboot
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我明明已經解除安裝 nftables 了，是沒有重啓，還是因為再下載了要用到 nftables 的 firewalld 呢？總之現在再試 &lt;code&gt;docker run busybox ping google.com&lt;/code&gt; 成功了！PHP 程式也順利拿到了網站的 JSON 檔案。真的高興得要拍手慶祝。&lt;/p&gt;
&lt;p&gt;搞了半天，我學會什麼了呢？重新温習了一遍 Arch 的上網設置，放棄了原本已經調整好的 dnsmasq，還知道了 nftables 和 iptables 有着神秘的關係。一天就這樣過去了。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>地鐵畫畫</title>
        <link>https://evthron.github.io/zh/posts/drawing-on-train/</link>
        <pubDate>Sat, 12 Oct 2024 20:48:32 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/drawing-on-train/</guid>
        <description>&lt;img src="https://evthron.github.io/zh/posts/drawing-on-train/drawing-on-train.jpg" alt="Featured image of post 地鐵畫畫" /&gt;&lt;p&gt;地鐵上，大家的握手機姿勢各種各樣：單手小指頂着機底，拇指滑屏幕；左手手掌捧着機背，右手食指滑屏幕；雙手在機背交疊，兩隻拇指在屏幕上快速敲擊；還有雙手抓着橫置的手機兩側，兩隻拇指在屏幕上劃圈。加上我的觀察角度也變來變去，有時是瞄旁邊的座位，有時是抬頭看坐在我正對面的人，或是側着身子抓把手的人。居然有種「橫看成嶺側成峯」的感覺。&lt;/p&gt;
&lt;p&gt;這個時候，我作為列車上唯一一個不想看手機的人，該做什麼才能消除盯着玻璃窗做白日夢的煩悶呢？就是把這些形態各異的手掌全部描在紙上，做一本手掌合輯。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://evthron.github.io/zh/posts/drawing-on-train/hands-1.jpg&#34;
	width=&#34;4305&#34;
	height=&#34;6053&#34;
	srcset=&#34;https://evthron.github.io/zh/posts/drawing-on-train/hands-1_hu14577960205367293298.webp 480w, https://evthron.github.io/zh/posts/drawing-on-train/hands-1_hu5644615898879259456.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hands-1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;170px&#34;
	
&gt;
&lt;img src=&#34;https://evthron.github.io/zh/posts/drawing-on-train/hands-2.jpg&#34;
	width=&#34;4326&#34;
	height=&#34;5916&#34;
	srcset=&#34;https://evthron.github.io/zh/posts/drawing-on-train/hands-2_hu2954258406186769206.webp 480w, https://evthron.github.io/zh/posts/drawing-on-train/hands-2_hu10906784864438933274.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;hands-2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;要盯着陌生人看肯定是不自在的。所以我會使用一些技巧。豎起本子，不能讓別人看見自己的畫紙；挑選離自己很遠的目標；不要一邊盯着人看一邊畫，要記住影像才在紙上動筆等等。不過這些技巧其實都不重要，最大的功臣還是手機。雖然我不太樂見，但正正是因為大家都無暇顧及手機之外的事物，我才有可乘之機。&lt;/p&gt;
&lt;p&gt;手掌合輯畫膩了，就改畫球鞋合輯，再接着畫髮型合輯。「列車上有數不清的模特兒站着不動讓我畫，真是個理想的畫室！」但他們隨便翻一下手掌，轉一下頭，我就只能傻傻地盯着紙上的半成品了。沒什麼好抱怨的，畢竟世界的一切景象本來就是稍縱即逝的。不僅落筆要快，萬一目標下車了，就要找另外一個姿勢相似的目標拼接起來。&lt;/p&gt;
&lt;p&gt;就這樣，我練就了一項無人能及的功夫：筆走龍蛇如入無人之境；目所能及之處，皆是素材。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://evthron.github.io/zh/posts/drawing-on-train/passengers-1.jpg&#34;
	width=&#34;4317&#34;
	height=&#34;6081&#34;
	srcset=&#34;https://evthron.github.io/zh/posts/drawing-on-train/passengers-1_hu14828757093143374942.webp 480w, https://evthron.github.io/zh/posts/drawing-on-train/passengers-1_hu9724398639985587653.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;passengers-1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;70&#34;
		data-flex-basis=&#34;170px&#34;
	
&gt;
&lt;img src=&#34;https://evthron.github.io/zh/posts/drawing-on-train/passengers-2.jpg&#34;
	width=&#34;4329&#34;
	height=&#34;6052&#34;
	srcset=&#34;https://evthron.github.io/zh/posts/drawing-on-train/passengers-2_hu17054684828623142521.webp 480w, https://evthron.github.io/zh/posts/drawing-on-train/passengers-2_hu9862103546051939853.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;passengers-2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;71&#34;
		data-flex-basis=&#34;171px&#34;
	
&gt;
&lt;img src=&#34;https://evthron.github.io/zh/posts/drawing-on-train/shoes.jpg&#34;
	width=&#34;4356&#34;
	height=&#34;5951&#34;
	srcset=&#34;https://evthron.github.io/zh/posts/drawing-on-train/shoes_hu656644081911722289.webp 480w, https://evthron.github.io/zh/posts/drawing-on-train/shoes_hu5983663412179260210.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;shoes&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;73&#34;
		data-flex-basis=&#34;175px&#34;
	
&gt;
&lt;/p&gt;
</description>
        </item>
        <item>
        <title>井字棋入門</title>
        <link>https://evthron.github.io/zh/posts/tic-tac-toe/</link>
        <pubDate>Sun, 15 Sep 2024 15:39:01 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/tic-tac-toe/</guid>
        <description>&lt;h1 id=&#34;第一章-基礎知識&#34;&gt;第一章 基礎知識&lt;/h1&gt;
&lt;p&gt;井字棋是一種風靡全世界的遊戲，又名「過三關」，「圈叉棋」。井字棋的規則連小孩子也能明白，卻有着十變百化的局面，使人樂此不疲。&lt;/p&gt;
&lt;h2 id=&#34;一遊玩方法&#34;&gt;一、遊玩方法&lt;/h2&gt;
&lt;p&gt;井字棋不需要棋盤。在白紙上劃兩條豎、兩條橫線（圖一）就可以玩。這個遊戲裏有兩種棋子 O 和 X，雙方各執一種棋子，先手用 O，後手就用 X；先手用 X，後手就用 O。在格子裏畫下自己的棋子叫作「下子」。誰先手誰後手由玩家自行協商，一般都是用剪刀石頭布決定。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;_|_|_
_|_|_
 | |
圖一，井字棋的格子
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;二勝利方法&#34;&gt;二、勝利方法&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;自己的棋子沿着橫方向，三個連成一線&lt;/li&gt;
&lt;li&gt;自己的棋子沿着豎方向，三個連成一線&lt;/li&gt;
&lt;li&gt;自己的棋子沿着對角方向，三個連成一線&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;井字棋的初學者常常會忽略對角方向的連線，讓對手有可乘之機。只要細心觀察，判斷井字棋的局面其實是很簡單的。&lt;/p&gt;
&lt;p&gt;這些勝利條件很多時候會是會同時生效的。互相交錯的棋子和難以預測的局面，是井字棋的樂趣所在。&lt;/p&gt;
&lt;h2 id=&#34;三記錄棋局&#34;&gt;三、記錄棋局&lt;/h2&gt;
&lt;p&gt;井字棋用一連串的座標記錄棋局。要玩好井字棋，一定要好好學習棋譜，所以我們要先瞭解井字棋的座標是怎樣定義的。橫行從上至下叫1、2、3，縱列從左到右叫a、b、c。我們根據格子在哪一行哪一列，為這個格子安上名字。例如，中間格在第二行第二列，就叫作 b2。&lt;/p&gt;
&lt;p&gt;一場棋局的棋譜看起來是這樣的：a1, b1, a3, a2, c3, b2, b3。先手在這場棋局（圖二）裏施展了一次著名的三角殺法。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  a b c
1|O X  
2|X X
3|O O O
圖二，先手使用了三角殺取得勝利
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因為棋盤可以旋轉，相似的棋局會有多一種編碼。為了消除重複的編碼，讓棋譜更容易分析。編寫棋譜的時候會按照開局的第一步調整。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下在了角，那個位置就是 a1。&lt;/li&gt;
&lt;li&gt;下在了邊，那個位置就是 b1。&lt;/li&gt;
&lt;li&gt;下在了中間格 b2，就由第二步決定座標，下在了角就是 a1，邊就是 b1。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;四攻擊和防守&#34;&gt;四、攻擊和防守&lt;/h2&gt;
&lt;p&gt;下子之後，只差一子就連成一線，這次下子就是一次攻擊，也叫作「喊殺」。下子之後，使對方無法落下第三子，這就是一次防守。井子棋的先後手有着明確的區別：先手能頻繁地進攻，主導着棋局的發展，而後手就要不斷地防守，試圖抓住先手的破綻。知道了以上這些，你就可以開始玩井字棋了，不用着急看接下來的部分。第二章會更詳細地説明與攻擊和防守有關的關鍵概念。&lt;/p&gt;
&lt;h1 id=&#34;第二章-關鍵概念&#34;&gt;第二章 關鍵概念&lt;/h1&gt;
&lt;h2 id=&#34;一殺法&#34;&gt;一、殺法&lt;/h2&gt;
&lt;p&gt;你喊殺我就擋，再喊我就再擋，一來一回，似乎雙方只會持續着拉鋸戰，都沒有取勝的辦法。要打破這個僵局，就要説到「殺法」這個概念了。井字棋最為精妙之處，就是能夠下一次子，形成多條殺路。這樣一來，對手就沒有招架的辦法。構建殺法一般需要三條殺路，對手有機會阻擋兩條殺路，只會留下一條能夠取勝的路線。殺法可以根據這三枚棋子的位置分成三種：三角殺、中邊角殺和角邊角殺。&lt;/p&gt;
&lt;h2 id=&#34;二反制&#34;&gt;二、反制&lt;/h2&gt;
&lt;p&gt;反制，是在防住對手攻擊的時候同時喊殺，迫使對手浪費一次構建殺局的機會來防禦，是後手扭轉局勢的唯一辦法。&lt;/p&gt;
&lt;h1 id=&#34;第三章-實戰&#34;&gt;第三章 實戰&lt;/h1&gt;
&lt;p&gt;開局是先手在一場比賽裏最重要的決定。開局分為三種，中開，邊開，角開。每一種對應不同的戰略。 角開是最適合新手的開局，能夠使用三角殺，快速擊敗缺乏經驗的對手。中開是非常穩定的開局，下子的對稱性能夠大副減少需要思考的可能局面，而且能夠往四方八面連線，殺法眾多，局面豐富。有助新手練習推演能力。邊開是最弱的開局，基本不可能取勝，只有在高手的對決中能當成奇策。&lt;/p&gt;
&lt;h2 id=&#34;角開&#34;&gt;角開&lt;/h2&gt;
&lt;p&gt;角開是最簡單的開局，能夠迅速構建三角殺。三角殺需要的是 a1、a3、c1 三個角落，形成形成橫豎斜三條殺路。這個開局的明顯缺陷是放棄了關鍵的中間格。只要被有經驗的對手佔據中間格 b2，擋住斜路，就能被輕易破解。所以角開又被稱為「新手開局」。不需過多的分析，輸贏就看對手能不能看穿自己的意圖。&lt;/p&gt;
&lt;p&gt;從這個新手開局裏，我們發現井子棋的中間格是兵家必爭之地，佔據了中間格，就算不能勝利，也能掌控局面。為何不一開始就下在中間格呢？接下來就要説到最常用的中開了。&lt;/p&gt;
&lt;h2 id=&#34;中開&#34;&gt;中開&lt;/h2&gt;
&lt;p&gt;井字棋的棋盤設計，使得棋手佔領中心，才能形成橫、豎、斜三路（三角殺除外）。所以，先手開局「搶中」，是常見的做法。
中開的局面變化多樣，可使用多種殺法，如中邊角殺和角邊角殺。適合進階的棋手使用。&lt;/p&gt;
&lt;p&gt;這個開局追求的是中邊角殺。中邊角殺還細分成直角三角形式（a1, a2, b2） 和等腰三角形式（a1, b2, a3）。要採用那種形式，要按照對方的應對決定。中邊角有兩點要注意，第一是要熟記兩種形式的形狀，第二是要注意不要給對方反制的機會，必須更注重防禦。在角開裏，後手是沒有取勝的機會的，但在中開裏，對手可以埋伏好角角邊殺反擊。經驗不足的棋手容易出錯，使後手有反敗爲勝的機會。&lt;/p&gt;
&lt;h3 id=&#34;一對方使用邊擋b1&#34;&gt;一、對方使用邊擋（b1）&lt;/h3&gt;
&lt;p&gt;這是比較缺乏經驗的對手。無論是直角三角形式還是等腰三角形式都可以。直角三角形式比較單純，只要在第 2 行的橫線進攻，再在第 3 行佔據一個角。就能順利使出中邊角殺。等腰三角形式就要注意不要給對方反制的機會。下在第 1 行的角沿斜線進攻，再在第 3 行的角進攻就完成了。&lt;/p&gt;
&lt;h3 id=&#34;二對方使用角擋-a1&#34;&gt;二、對方使用角擋 (a1)&lt;/h3&gt;
&lt;p&gt;面對角擋，絕對不能使用直角三角形式。因為對方可以使用角邊角殺（a1, c2, c1）反殺。角邊角殺只需要橫和豎兩條殺路，是比較少見的殺法。就算是使用等腰三角形式，對方也一樣有反制的機會。井字棋中有名的「自動平手」局面，也是在這裏出現的：b2, a1, b3, b1, c1, a3, a2, c2, c3。雙方陷入了不斷反制的局面，被迫打成平手。&lt;/p&gt;
&lt;p&gt;中開的平手頻率是很高的，尤其雙方都對對方的進攻手段很熟悉的時候，在常見在賽制下，例如七局四勝制下，如果雙方都只使用中開，很容易僵持不下。為了在高手之間的對決中勝出，就要説到一個被很多人忽略的開局，也就是邊開了。&lt;/p&gt;
&lt;h2 id=&#34;邊開&#34;&gt;邊開&lt;/h2&gt;
&lt;p&gt;邊開是最弱的開局，對新手來說幾乎不可能獲勝。先手只有唯一一個勝機。一旦對手下在了於自己不相交的邊，即 a2 或 c2。下在不相交的邊是井字棋的一個難以注意到的錯誤。這不能妨礙對方繼續構建殺法，相當於放棄了一次防禦機會。由於這個開局相當少見，後手判斷錯誤也是有可能的。&lt;/p&gt;
&lt;p&gt;一旦對方放棄了防禦，就能輕易搶回中心，讓局勢回到「中開」後下邊的局勢（b2，b1），然後使用「中開」的策略，用 a1 位置構建中邊角殺。&lt;/p&gt;
&lt;p&gt;這個開局把主動權讓給了對手。在井字棋中，多數的後手習慣使用防禦戰術逼和，先手露出空隙的情況少之又少。先手讓子，反而有出奇制勝的機會。&lt;/p&gt;
&lt;h1 id=&#34;結語&#34;&gt;結語&lt;/h1&gt;
&lt;p&gt;要玩好井字棋並不容易，無論輸掉多少次也絕對不要氣餒。任何一個井字棋玩家，都是要經過數小時的鑽研，才能成為大師的。最重要的，還是不要執着於勝負，好好享受在賽局中思考每一步棋的樂趣。畢竟當你知道了一個遊戲的必勝法，不用思考就能下決定，這個遊戲對你來説就死了。你是要沉迷於這輕易取得的勝利，還是要看向下一個新遊戲，再次感受殺掉遊戲的快樂呢？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>中位數公式</title>
        <link>https://evthron.github.io/zh/posts/median/</link>
        <pubDate>Wed, 11 Sep 2024 19:35:28 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/median/</guid>
        <description>&lt;p&gt;我為什麼要莫名其妙地研究什麼「&lt;a class=&#34;link&#34; href=&#34;../cardinal-ordinal&#34; &gt;量數和序數&lt;/a&gt;」呢？這是因為我搞不懂中位數的公式。統計學課本上都寫着，是 (n+1)/2，n 是數字的總數。公式很簡單，但卻很難理解。為什麼要先加一再除以二？你可能會説，管它那麼多幹嘛，套公式就完了。但是，二分查找法&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;也要用到中位數，但公式變成了 (n - 1)/2，這似乎和編程語言從零開始編號的做法有關。兩者的差異使我如鯁在喉，這個問題又不需要特殊的數學知識，為了以後寫二分查找法的時候不會出錯，我接下了這個挑戰。&lt;/p&gt;
&lt;p&gt;歸根究底是這個問題：為什麼五个蘋果平分是 2.5 個，但五根手指的中間是第三根呢？這就是量數和序數的不同。想象你在一排路燈旁邊散步。路燈從一到五編好了號。從一號路燈走到五號路燈需要四步，用數式表示是這樣的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;一號 + 四步 = 五號
起點編號 + 步數 = 終點編號
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;移項得到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;四步 = 五號 - 一號
步數 = 終點編號 - 起點編號
如果從 1 開始編號，步數 = 終點編號 - 1。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這裏的編號就是序數，可以看到，序數相減能變成步數。步數是量數，有加減乘除。這就是我原創的「序數運算」。數學家用序數研究什麼是「&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=SrU9YDoXE88&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;無限+1 (Youtube)&lt;/a&gt;」，我用序數研究小學數學，這下我也當了一回「民間數學家」了。&lt;/p&gt;
&lt;p&gt;現在回到中位數的問題。中位數是用來切開數列的一把刀，左右兩邊的數字數量相等。例如數列 56789，排在第三位的7就是中位數。要找到中位數，就要先知道中位數排在第幾位。用路燈的比喻思考，從起點走到中間路燈的距離，等於從中間路燈走到盡頭的距離。這是「中間」的定義，所以：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;起點編號 + 總步數 ÷ 2 = 中位數編號
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;展開「總步數」：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;起點編號 + （終點編號 - 起點編號）÷ 2 = 中位數編號
（起點編號 + 終點編號）÷ 2 = 中位數編號
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這下公式的意義就很明確了，統計學和編程的差異也一目瞭然。正常人從一開始編號，總數 n 就是終點編號，所以中位數公式是 (1 + n) ÷ 2，而程序員從零開始編號，終點編號變成了 n - 1，所以中位數公式是 (0 + n - 1) ÷ 2。&lt;/p&gt;
&lt;p&gt;聽着似乎很彆扭，為什麼偏偏要從零開始數？我來稍微解説一下。編程和統計學不一樣，不太不關心總數，編號反而更有用，所以我們遇到的 n 往往是終點編號。這樣一來，中位數公式就成了簡單的 n / 2。&lt;/p&gt;
&lt;p&gt;這裏附上簡單的二分查找的説明。我們要從一串數字裏找到 10，這些數字已經按大小編好了號，當然是從零開始編。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;數字：0  2  4  10 15
編號：0  1  2  3  4
     頭          尾
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第一個中點是 0 + (4-0)/2 = 2。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;數字：0  2  4  10 15
編號：0  1  2  3  4
     頭    中    尾
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;編號 2 的數字是 4，比 10 小，所以接着把中點設成起點。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;數字：0  2  4  10 15
編號：0  1  2  3  4
           頭    尾
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二個中點是 2 + (4 - 2) /2 = 3&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;數字：0  2  4  10 15
編號：0  1  2  3  4
           頭 中 尾
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;編號 3 的數字是 10，找到收工。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;編程術語，一種從數列中搜尋數字的流程&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        <item>
        <title>交換知識的聊天挑戰 </title>
        <link>https://evthron.github.io/zh/posts/knowledge-exchange/</link>
        <pubDate>Sat, 29 Jun 2024 13:43:57 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/knowledge-exchange/</guid>
        <description>&lt;p&gt;我不喜歡閒聊時大家常常會説的話題。聊天氣吃飯？沒有辦法瞭解對方。聊學習工作？簡直是嚴刑逼供。聊煩惱夢想？又害怕交淺言深。到底什麼話題才能讓閒聊有趣起來？&lt;/p&gt;
&lt;p&gt;對話的基本目的，不就是知道自己不知道的事嗎？所以我想了一個能讓閒聊變得有收穫的挑戰：每次閒聊的時候，都要交換一件對方不知道的事。&lt;/p&gt;
&lt;p&gt;每個人都有自己熟悉的事情，所以不愁沒有交換的材料。可以聊當天的新聞，可以推薦自己最近聽的歌，可以分享自己在維基百科上讀到的冷門知識。不要擔心別人沒有興趣，只要讓別人也説一件他熟悉的事情，你們就扯平了。這就像是玩卡片遊戲的時候互相交換多出來的卡片，雖然自己的卡片和別人的卡組不一定合得起來，但總有機會派上用場的。這樣一點一滴地累積卡片，還能組成一副新的卡組。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://evthron.github.io/zh/skill/right-sider&#34; &gt;記錄數據&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>寫作和繪畫 </title>
        <link>https://evthron.github.io/zh/posts/writing-and-drawing/</link>
        <pubDate>Fri, 21 Jun 2024 11:16:06 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/writing-and-drawing/</guid>
        <description>&lt;p&gt;寫作好像和繪畫不沾邊，但這兩項活動其實是十分相似的。我聽説過有些古代的文人既是文學家，也是畫家，兩項活動對他們來説是不分家的。我自己研究了一下之後，也明白了繪畫和寫作之間相似又相反的奇特關係。&lt;/p&gt;
&lt;p&gt;從表面看，寫文章和畫畫似乎一點相似的地方都沒有：文章是逐字逐句去讀的，但畫是一眼就看得完的；任何人寫作，用的都是同一套漢字，但每個人畫畫，用的顏料都不一樣；好的文章是要複製一千份、一萬份，甚至要翻譯成其他語言，讓世界各地的人讀的，但好的畫作卻是獨一無二的，要是讓其他人重畫一次，就不再是原來的那一副畫了。&lt;/p&gt;
&lt;p&gt;但其實作家和畫家都有一樣的目的，就是把自己觀察到的東西記錄下來。作家寫不出自己沒經歷過的事情，畫家也畫不出自己沒見過的東西。好的作品，一定誠實地記錄下了自己的所見所聞。這裏的誠實，不只是不改變事物原本的面貌，更重要的是不能扭曲腦海裏的真實印象。可以説，並不是因為想要寫作、想要畫畫，才會去觀察身邊的事情，而是因為觀察到了身邊發生的事情，得到了一些印象，然後想要把這些印象記錄下來，才會去寫作和畫畫。&lt;/p&gt;
&lt;p&gt;但是，明明都是在記錄自己觀察到了什麼，為什麼寫作和繪畫這麼不一樣呢？這是因為它們的形式，也就是文字和圖案，是完全相反的兩個極端。文字，是一個個的抽象概念。 所有人都知道什麼是「人」，但每個人心中的「人」都是不一樣的。「人」這個概念，只是一種概括，概括了這個世界上數不清的人。而畫就不一樣了，同一張臉，只要把眼睛的距離拉開一點，縮窄一點，給人的感覺就會完全不一樣。我們是沒有辦法概括一張人臉的，只有實際看到了，才會明白那個人長什麼樣子。兩種方法從不同的起點出發，會遇到的也是不一樣的難題。寫文章的困難，是怎樣組合一個個抽象的概念，才能堆積成生動而獨一無二的印象。相反，畫畫的困難，是怎麼樣堆疊複雜的線條、形狀和顏色，才能引起一種完整的抽象感受。用剛才説的「人」當例子：想描述一個男人很帥很簡單，但要讓人明白到底帥成什麼樣就很難了；想畫出一個女人長什麼樣子很簡單，但要讓人感覺那個女人很漂亮就很難了。&lt;/p&gt;
&lt;p&gt;這兩個問題的解決辦法，就是前面説的誠實。不需要特意去找華麗的文辭，只要用自己會説的話寫出來就可以了；不需要參考大師的技巧，只要相信自己眼睛看到的畫面畫出來就可以了。努力認識、觀察和表達自己和自己身邊的世界，雖然不一定會創作出流傳千古的名作，但一定能創作出對自己有意義的作品。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>音階 </title>
        <link>https://evthron.github.io/zh/posts/scale/</link>
        <pubDate>Mon, 10 Jun 2024 04:52:49 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/scale/</guid>
        <description>&lt;p&gt;這個世界上到底有多少種旋律？光看一個個音的組合，種類當然無窮無盡。但是真正好聽的組合應該只有一小部分，不可能真的無窮無盡。&lt;/p&gt;
&lt;p&gt;第一個問題是，音樂裏面有幾個音？這個容易回答。隨意選一個震動頻率，把這個頻率加倍，就是高八度的同一個音。在這兩個音之間分割十二份，就有十二個不一樣的音。十二個音太多了，不好編旋律，所以作曲家會挑出當中一部分的音使用，這一部分的音就是音階。&lt;/p&gt;
&lt;p&gt;旋律通常是在某個音階上寫成的。例如 Do Re Mi Fa So La Ti Do形成了大調音階，很多兒歌都是用大調音階寫的。其他音階是在大調音階加上臨時記號之後的變種。例如小調就是把大調音階的第三，第六和第七個音降半音。如果只挑五個音，就會形成五聲音階。如果把這十二個音全部彈出來，就會形成半音階。&lt;/p&gt;
&lt;p&gt;用音階寫旋律雖然方便，但也限制了我們能寫什麽旋律。那麽，如果能發現新的音階，不就能發現新的旋律嗎？&lt;/p&gt;
&lt;p&gt;所謂的音階，可以看作音程的組合。如果把音程限制在半、全、增三種（1, 2, 3），要跨越一個八度的話，到底有多少種可能的音程組合呢？一個八度裏面有十二個音程。如果把所有的音程都彈出來的話，可以寫成十二個一：1111 1111 1111。在大調音階裏面，一步會跳兩個音程，例如從 C 到 D ，有時候也會跳一個音程，例如從 E 到 F。這些音程可以寫成 2212221。用同樣的方式看待小調音階，就會寫成 2122132（這裏指的是和聲小調音階，我後來才發現小調音階有好幾種）。&lt;/p&gt;
&lt;p&gt;我在這個時候發現，之前考試要考的，讓人學得頭昏的組合數學居然派上用場了。這個問題叫做 Combination with replacement 。解決方法叫做 Stars and bars。不過要分別計算每一種的排列的話，就要一個個數出來了。總共有 927 種。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
3333 = 1

33321 = 20
333111 = 20

33 111 111 = 28
33 21 111 = 105
33 22 11 = 90
33 222 = 10

3 111 111 111 = 10
3 21 111 111 = 72
3 22 11 111 = 168
3 222 111 = 140
3 2222 1 = 30

222222 = 1
22222 11 = 21
2222 11 11 = 70
222 11 11 11 = 84
22 11 11 11 11 = 45
2 11 11 11 11 11 = 11

11 11 11 11 11 11 = 1

Total = 927
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;事情本來到這裏就結束了。但是我又想到，和五聲音階這種連音的數量都不一樣的音階不一樣，大調和小調看似不同，但使用的是的是同一組的音程。音階是循環的，不用加入新的音，也可以形成新的音階，但音程組合並沒有改變。這應該不是簡單的排列組合，而是環形的排列組合。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Augment:    2222121
Lydian:     2221221
Major:      2212221
Mixolydian: 2212212 
Dorian:     2122212 
Aeolian:    2122122
Har minor:  2122132
Phygian:    1222122
Phy Domin:  1312122
Locian:     1221222
Altered:    1212222
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是，在環形排列裏面如果有重複的元素，應該怎麼數呢？我這才發現，我從來都沒有碰到過這樣的問題。環形排列在高中就教過了，可以説連小學生都能懂，但為什麼沒有碰到過呢？原來，只要在環形排列裏加入重複的元素，就要用上群論了，一點也不簡單，難怪沒有學過。Burnside&amp;rsquo;s theorem 的原理很複雜，不過算起來倒不難。就是把音階的旋轉對稱性考慮進去，計算每個音階的「軌道」（Orbit）。全部算出來之後，答案是132。也就是說，在一個八度裏分割音程，只有132種可能。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;3333 = 1
33321 = (20 + 0) / 5 = 4
333111 = (20 + 4) / 6 = 4
33 111 111 = 28 + 4 / 8 = 4
33 21 111 = 105 + 0 / 7 = 15 
33 22 11 = 90 + 6 / 6 = 16
33 222 = 10 + 0 / 5 = 2
3 111 111 111 = 10 + 0 / 10 = 1
3 21 111 111 = 72 + 0 / 9 = 8 
3 22 11 111 = 168 + 0 / 8 = 21
3 222 111 = 140 + 0 / 7 = 20
3 2222 1 = 30 + 0 / 6 = 5
222222 = 1
22222 11 = 21 + 0 / 7 = 3
2222 11 11 = 70 + 10 / 8 = 10
222 11 11 11 = 84 + 6 / 9 = 10
22 11 11 11 11 = 45 + 5 / 10 = 5
2 11 11 11 11 11 = 11 / 11 = 1
11 11 11 11 11 11 = 1
= 1 + 4 + 4 + 4 + 15+16+2+1+8+21+20+5+1+3+10+10+5+1+1

= 132
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;這樣不是很可惜嗎？明明有132種音階，但是我們只會用其中的兩三種。&lt;/p&gt;
&lt;p&gt;不過，這樣只是從理論角度考慮，音樂要好聽似乎有很多限制，不是隨便挑一些音就能組成音階的。例如至少要保留四度音和五度音，像什麼 33 111 111，寫出來的音樂應該很奇怪，派不上用場。&lt;/p&gt;
&lt;p&gt;説不定，我一開始就搞錯方向了。旋律好像是非常自由的，沒有什麼限制。真正決定音樂好不好聽的，不是和弦嗎？所以我應該去數和弦才對。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>量數和序數</title>
        <link>https://evthron.github.io/zh/posts/cardinal-ordinal/</link>
        <pubDate>Sat, 20 Jan 2024 22:43:24 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/posts/cardinal-ordinal/</guid>
        <description>&lt;img src="https://evthron.github.io/zh/posts/cardinal-ordinal/apple-clock.jpg" alt="Featured image of post 量數和序數" /&gt;&lt;p&gt;從一點到三點，過了幾個小時？2021年出生的孩子，到了2023年幾歲？計算這些可能很簡單，但時刻、小時、年份、年齡背後的概念，量數&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;和序數的關係，並不是一目了然的。&lt;/p&gt;
&lt;p&gt;量數遠比序數有用。量數是表示數量的數，可以進行加減乘除等數學運算，這些運算對應着現實中物件的合併和分割；而序數只是表示物件先後次序的標籤，沒有數學運算可言。比如在時鐘上，兩點在一點的後面，三點在兩點的後面，但是不能把「一點」和「兩點」加起來得到「三點」，這是沒有意義的。&lt;/p&gt;
&lt;p&gt;要利用序數，就要先轉換成有用的量數。對於不同的問題，我們關心的量數是不一樣的，所以轉換方法也不一樣。&lt;/p&gt;
&lt;p&gt;在數物件的時候，我們關心的量數是「物件的量數」，這剛好和「最後一個物件的序數」是相等的。比如要知道桌子上有幾個蘋果，就要「第一個，第二個，第三個」這樣數出來。如果數到了第三個蘋果，數過的蘋果總數就是三個。&lt;/p&gt;
&lt;p&gt;但是有時候，我們想知道的量數，是序數之間的「距離」，和序數本身無關。比如說時鐘使用的序數是「點」，但我們並不關心時間點的數量，而是經過了幾個小時，也就是時間點之間的「距離」。從一點到三點過了三個時間點，但只過了兩小時。數法是一點走到兩點一小時，兩點走到三點兩小時。同樣，計算年齡使用的序數是「年份」，但我們也不關心經過了幾個年份，只關心過了多少年。年也是一種距離。2021 到 2023 年總共過了三個年份，但只長了兩歲。&lt;/p&gt;
&lt;p&gt;序數相減得出距離。只要計算 3 - 1 = 2，2023 - 2021 = 2，就知道度過了兩小時，長了兩歲。換個方向，把序數加減一個距離，就可以得到另一個序數。比如從一點開始過了兩小時，就到了 1 + 2 = 3 點。&lt;/p&gt;
&lt;p&gt;這些雖然是基礎得不能再基礎的算數題，但要注意，理論上序數可以從任何數字開始數，方向也不是固定的，所以轉換方法也不一樣。這是在生活中不會出現的問題，因為我們總是從 1 開始順着數；但是在麻煩的程式語言領域是從 0 開始數的，所以不把這些概念弄清楚的話，會有很多麻煩。&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;集合論一般稱為基數，我只是挑了個我喜歡的詞。&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
        
    </channel>
</rss>
