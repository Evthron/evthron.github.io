<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Evthron&#39;s blog zh</title>
        <link>https://evthron.github.io/zh/tags/science/</link>
        <description>Recent content on Evthron&#39;s blog zh</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh</language>
        <lastBuildDate>Mon, 29 Jan 2024 05:05:42 +0800</lastBuildDate><atom:link href="https://evthron.github.io/zh/tags/science/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>準確的色環</title>
        <link>https://evthron.github.io/zh/gallery/accurate-colour-wheel/</link>
        <pubDate>Mon, 29 Jan 2024 05:05:42 +0800</pubDate>
        
        <guid>https://evthron.github.io/zh/gallery/accurate-colour-wheel/</guid>
        <description>&lt;img src="https://evthron.github.io/zh/gallery/accurate-colour-wheel/accurate-colour-wheel.png" alt="Featured image of post 準確的色環" /&gt;&lt;p&gt;顏色是由色相、明度、飽和度決定的，排除明度和飽和度的干擾，才能培養對顏色關係的正確感覺。我用 &lt;a class=&#34;link&#34; href=&#34;https://oklch.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;OKLCH 顏色選擇器&lt;/a&gt; 做了個符合色覺認知的色環。色環上的顏色有着相同的明度（Brightness）和飽和度（Chroma），色相（Hue）的間隔也是均勻的。&lt;/p&gt;
&lt;p&gt;傳統美術都不是會做色環嗎？這個是我做的&lt;a class=&#34;link&#34; href=&#34;https://evthron.github.io/zh/oklch-color-wheel&#34; &gt;互動色環&lt;/a&gt;。試着玩一下吧。&lt;/p&gt;
&lt;style&gt;
  canvas {
    display: block;
    width: 50%;
    border-radius: 50%;
    cursor: grab;
    margin: auto;
  }
  .controls {
    display: block;
    margin: auto;
    background: white;
    padding: 20px;
    border-radius: 10px;
    width: 300px;
  }
  input[type=&#34;range&#34;] {
    width: 100%;
  }
  label {
    display: block;
    margin: 10px 0;
  }
&lt;/style&gt;

&lt;canvas id=&#34;colorWheel&#34; width=&#34;600&#34; height=&#34;600&#34;&gt;&lt;/canvas&gt;
&lt;div class=&#34;controls&#34;&gt;
  &lt;label&gt;
    Lightness (L): &lt;span id=&#34;lValue&#34;&gt;0.75&lt;/span&gt;
    &lt;input
      type=&#34;range&#34;
      id=&#34;lControl&#34;
      min=&#34;0&#34;
      max=&#34;1&#34;
      step=&#34;0.01&#34;
      value=&#34;0.75&#34;
    /&gt;
  &lt;/label&gt;
  &lt;label&gt;
    Chroma (C): &lt;span id=&#34;cValue&#34;&gt;0.12&lt;/span&gt;
    &lt;input
      type=&#34;range&#34;
      id=&#34;cControl&#34;
      min=&#34;0&#34;
      max=&#34;0.2&#34;
      step=&#34;0.01&#34;
      value=&#34;0.12&#34;
    /&gt;
  &lt;/label&gt;
  &lt;label&gt;
    Rotation: &lt;span id=&#34;rotationValue&#34;&gt;0&lt;/span&gt;°
    &lt;input
      type=&#34;range&#34;
      id=&#34;rotationControl&#34;
      min=&#34;0&#34;
      max=&#34;360&#34;
      step=&#34;15&#34;
      value=&#34;0&#34;
    /&gt;
  &lt;/label&gt;
  &lt;label&gt;
    Neutral Gray Lightness: &lt;span id=&#34;grayValue&#34;&gt;0.5&lt;/span&gt;
    &lt;input
      type=&#34;range&#34;
      id=&#34;grayControl&#34;
      min=&#34;0&#34;
      max=&#34;1&#34;
      step=&#34;0.01&#34;
      value=&#34;0.5&#34;
    /&gt;
  &lt;/label&gt;
  &lt;label&gt;
    Hue Offset: &lt;span id=&#34;hueOffsetValue&#34;&gt;0&lt;/span&gt;°
    &lt;input type=&#34;range&#34; id=&#34;hueOffsetControl&#34; min=&#34;0&#34; max=&#34;15&#34; value=&#34;0&#34; /&gt;
  &lt;/label&gt;
  &lt;button id=&#34;downloadBtn&#34; style=&#34;margin-top: 10px; padding: 8px 12px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;&#34;&gt;
    Download image
  &lt;/button&gt;
&lt;/div&gt;

&lt;script&gt;
  const canvas = document.getElementById(&#34;colorWheel&#34;);
  const ctx = canvas.getContext(&#34;2d&#34;);
  const center = { x: 300, y: 300 };
  const outerRadius = 300;
  const innerRadius = 150;
  const gapWidth = 8;

  
  const lControl = document.getElementById(&#34;lControl&#34;);
  const cControl = document.getElementById(&#34;cControl&#34;);
  const rotationControl = document.getElementById(&#34;rotationControl&#34;);
  const grayControl = document.getElementById(&#34;grayControl&#34;);
  const hueOffsetControl = document.getElementById(&#34;hueOffsetControl&#34;);
  const lValue = document.getElementById(&#34;lValue&#34;);
  const cValue = document.getElementById(&#34;cValue&#34;);
  const rotationValue = document.getElementById(&#34;rotationValue&#34;);
  const grayValue = document.getElementById(&#34;grayValue&#34;);
  const hueOffsetValue = document.getElementById(&#34;hueOffsetValue&#34;);

  
  let params = {
    l: 0.75,
    c: 0.12,
    grayL: 0.5,
    hueOffset: 0,
    rotation: 0,
    isDragging: false,
    startAngle: 0,
  };

  
  function init() {
    lControl.addEventListener(&#34;input&#34;, updateParams);
    cControl.addEventListener(&#34;input&#34;, updateParams);
    rotationControl.addEventListener(&#34;input&#34;, updateParams);
    grayControl.addEventListener(&#34;input&#34;, updateParams);
    hueOffsetControl.addEventListener(&#34;input&#34;, updateParams);

    canvas.addEventListener(&#34;mousedown&#34;, startDrag);
    canvas.addEventListener(&#34;mousemove&#34;, drag);
    canvas.addEventListener(&#34;mouseup&#34;, endDrag);
    canvas.addEventListener(&#34;mouseleave&#34;, endDrag);

    updateParams();
  }

  function updateParams() {
    params.l = parseFloat(lControl.value);
    params.c = parseFloat(cControl.value);
    params.rotation = parseInt(rotationControl.value);
    params.grayL = parseFloat(grayControl.value);
    params.hueOffset = parseInt(hueOffsetControl.value);

    lValue.textContent = params.l.toFixed(2);
    cValue.textContent = params.c.toFixed(2);
    rotationValue.textContent = params.rotation;
    grayValue.textContent = params.grayL.toFixed(2);
    hueOffsetValue.textContent = params.hueOffset;
    document.body.style.backgroundColor = `oklch(${params.grayL} 0 0)`;

    drawColorWheel();
  }

  function startDrag(e) {
    params.isDragging = true;
    params.startAngle = getAngle(e) - params.rotation;
  }

  function drag(e) {
    if (!params.isDragging) return;
    const angle = getAngle(e);
    params.rotation = angle - params.startAngle;
    rotationControl.value = params.rotation;
    updateParams();
  }

  function endDrag() {
    params.isDragging = false;
  }

  function getAngle(e) {
    const rect = canvas.getBoundingClientRect();
    const x = e.clientX - rect.left - center.x;
    const y = e.clientY - rect.top - center.y;
    return (Math.atan2(y, x) * 180) / Math.PI;
  }

  function drawColorWheel() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    
    ctx.fillStyle = `oklch(${params.grayL} 0 0)`;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    

    const rotationOffset = 15; 
    ctx.save();
    ctx.translate(center.x, center.y);
    ctx.rotate(((params.rotation + 15) * Math.PI) / 180);
    ctx.translate(-center.x, -center.y);

    
    const segmentAngle = (Math.PI * 2) / 12;
    const colourOffset = 4;

    for (let i = 0; i &lt; 12; i++) {
      
      const hue = (i * 30 + params.hueOffset + colourOffset * 30) % 360;

      
      ctx.fillStyle = `oklch(${params.l} ${params.c} ${hue})`;
      ctx.beginPath();
      ctx.moveTo(center.x, center.y);
      ctx.arc(
        center.x,
        center.y,
        outerRadius,
        i * segmentAngle,
        (i + 1) * segmentAngle
      );
      ctx.lineTo(
        center.x + innerRadius * Math.cos((i + 1) * segmentAngle),
        center.y + innerRadius * Math.sin((i + 1) * segmentAngle)
      );
      ctx.arc(
        center.x,
        center.y,
        innerRadius,
        (i + 1) * segmentAngle,
        i * segmentAngle,
        true
      );
      ctx.closePath();
      ctx.fill();
    }

    
    
    for (let i = 0; i &lt; 12; i++) {
      ctx.fillStyle = `oklch(${params.grayL} 0 0)`;
      ctx.beginPath();

      const angle = i * segmentAngle; 
      const tangentX = -Math.sin(angle);
      const tangentY = Math.cos(angle);
      const offset = gapWidth / 2;
      const newOuterRadius =
        innerRadius + ((outerRadius - innerRadius) * 7) / 8; 

      
      const outerStart = {
        x: center.x + newOuterRadius * Math.cos(angle) - tangentX * offset,
        y: center.y + newOuterRadius * Math.sin(angle) - tangentY * offset,
      };
      const outerEnd = {
        x: center.x + newOuterRadius * Math.cos(angle) + tangentX * offset,
        y: center.y + newOuterRadius * Math.sin(angle) + tangentY * offset,
      };
      const innerStart = {
        x: center.x + innerRadius * Math.cos(angle) - tangentX * offset,
        y: center.y + innerRadius * Math.sin(angle) - tangentY * offset,
      };
      const innerEnd = {
        x: center.x + innerRadius * Math.cos(angle) + tangentX * offset,
        y: center.y + innerRadius * Math.sin(angle) + tangentY * offset,
      };

      
      ctx.moveTo(outerStart.x, outerStart.y);
      ctx.lineTo(outerEnd.x, outerEnd.y);
      ctx.lineTo(innerEnd.x, innerEnd.y);
      ctx.lineTo(innerStart.x, innerStart.y);
      ctx.closePath();
      ctx.fill();
    }
    ctx.restore();
  }
  document.getElementById(&#34;downloadBtn&#34;).addEventListener(&#34;click&#34;, function () {
    const filename = `oklch_colorwheel_L${Math.round(
      params.l * 100
    )}_C${Math.round(params.c * 100)}_R${params.rotation}_G${Math.round(
      params.grayL * 100
    )}_H${params.hueOffset}.png`;

    const link = document.createElement(&#34;a&#34;);
    link.download = filename;
    link.href = canvas.toDataURL(&#34;image/png&#34;);
    link.click();
  });

  init();
&lt;/script&gt;

&lt;ul&gt;
&lt;li&gt;這些顏色是均勻分佈的，不過在非常亮、非常暗、和非常鮮豔的情況下，有些顏色無法顯示出來，所以就無法保持均勻了。這叫作色相斷層。&lt;/li&gt;
&lt;li&gt;不想要色相斷層的話，Chroma = 0.12，Brightness = 75 左右，是在 sRGB 空間中能達到的最高飽和度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2024/05/25&lt;/p&gt;
&lt;p&gt;這是一幅沒有明暗，沒有色彩對比，只有色相變化的畫，看起來非常不舒服。
&lt;img src=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/no-contrast.png&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/no-contrast_hu_aae5c5984ff35e27.webp 480w, https://evthron.github.io/zh/gallery/accurate-colour-wheel/no-contrast_hu_56a68e30ae873f68.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;no-contrast&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;改用飽和度最高的預設顏色重畫一次。雖然像是用小畫家亂畫的，但看上去居然舒服了不少。這是因為在調色盤裏的基礎顏色，本來就有不一樣的亮度和色彩對比。不過很難從這些各異的顏色出發，調出自己想要的顏色。
&lt;img src=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/naive-contrast.png&#34;
	width=&#34;1024&#34;
	height=&#34;1024&#34;
	srcset=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/naive-contrast_hu_434a8da56b6af5df.webp 480w, https://evthron.github.io/zh/gallery/accurate-colour-wheel/naive-contrast_hu_c14ac9880d4e3418.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;naive-contrast&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;100&#34;
		data-flex-basis=&#34;240px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;一般軟件的 HSV 顏色選擇器，只是把最鮮豔的顏色當成基礎色，然後把明度和飽和度的數值定為 100，這是不行的。因為不同的顏色，明度的上下限是不一樣的。用 RGB 像素説明最簡單：紅加綠得黃，如果把最亮的紅光和最亮的綠光混合起來，出來的黃光是不是比單獨的紅光或綠光亮？同樣原理，青色和洋紅色也能比單色光更亮。所以顏色選擇器的數值只是相對數值，改變了色相，就不能比較飽和度和亮度。&lt;/p&gt;
&lt;p&gt;實際的情況更加複雜，不只是顯示設備的問題，還涉及人眼的運作。不過，oklch 已經把種種因素考慮在內，所以能用絕對數值描述顏色。這也是個感知均勻的色彩空間，不會在改變明度的時候出現色彩偏移。&lt;/p&gt;
&lt;p&gt;色彩空間自然是連續的，一般的 RGB 顯示屏可以顯示一千六百萬種顏色，但是這對畫畫一點用都沒有。要讓顏色變得容易理解，就要套用傳統美術的色環概念。&lt;/p&gt;
&lt;p&gt;受限於過去顏料的限制，傳統藝術的顏色系統以 RYB 為基礎，這樣做出的色環是有偏差的。紫紅色代替了洋紅色，青色乾脆就不存在，使得色彩之間的互補關係不準確。雖然現在能買到洋紅色的顏料，但它照到光就會褪色，不適合作畫。沒有人會希望自己的畫展出一年後就變得像舊海報一樣藍，所以這種新顏料沒有普及開來。&lt;/p&gt;
&lt;p&gt;電腦自然不用顧慮這種物理問題，所以糾正大家色彩觀念的時候到了。現代的色環即使考慮了色相，也沒有考慮明暗和飽和度，所以我自己做了一個。我還做了不同明度的顏色飽和度圖，把明度分成 6 個等級，把飽和度分成 10 個等級。
&lt;img src=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/value-intensity-chart.png&#34;
	width=&#34;1790&#34;
	height=&#34;1512&#34;
	srcset=&#34;https://evthron.github.io/zh/gallery/accurate-colour-wheel/value-intensity-chart_hu_5692eeb610e74a41.webp 480w, https://evthron.github.io/zh/gallery/accurate-colour-wheel/value-intensity-chart_hu_244c23fec1490b0b.webp 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;value-intensity-chart&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;118&#34;
		data-flex-basis=&#34;284px&#34;
	
&gt;
&lt;/p&gt;
&lt;p&gt;要是能在繪畫軟件裏直接用就很方便了，可惜現在還沒有。Krita 的開發人員很重視色彩空間，所以我還是很有信心的。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
